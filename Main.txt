-- Carrega a YoungStar UI Library
local library = loadstring(game:HttpGet("https://raw.githubusercontent.com/bloodball/-back-ups-for-libs/main/youngstar"))()
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local Camera = workspace.CurrentCamera

-- Vari√°veis principais
local systemActive = false
local viewIndex = 1
local viewingPlayer = nil
local followConnection = nil
local playerList = {}
local selectedName = ""

-- GUI: Label com nome do jogador observado
local ScreenGui = Instance.new("ScreenGui", game:GetService("CoreGui"))
ScreenGui.Name = "ViewLabel"
local NameLabel = Instance.new("TextLabel", ScreenGui)
NameLabel.Size = UDim2.new(0, 300, 0, 30)
NameLabel.Position = UDim2.new(0.5, -150, 0, 10)
NameLabel.BackgroundTransparency = 0.4
NameLabel.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
NameLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
NameLabel.TextScaled = true
NameLabel.Font = Enum.Font.SourceSansBold
NameLabel.Text = ""
NameLabel.Visible = false

-- Atualiza a label com o nome do player observado
game:GetService("RunService").RenderStepped:Connect(function()
    if systemActive and viewingPlayer and viewingPlayer.Character then
        NameLabel.Text = "üëÅÔ∏è Observando: " .. viewingPlayer.Name
        NameLabel.Visible = true
    else
        NameLabel.Visible = false
    end
end)

-- Fun√ß√£o para atualizar a lista de jogadores v√°lidos
local function updatePlayerList()
    playerList = {}
    for _, p in pairs(Players:GetPlayers()) do
        if p ~= LocalPlayer and p.Character then
            table.insert(playerList, p)
        end
    end
end

-- Cria janela da biblioteca
local Window = library:CreateWindow("üî≠ View System")

-- Ativar / Desativar sistema de visualiza√ß√£o
Window:Toggle("Ativar Visualiza√ß√£o", function(state)
    systemActive = state
    if state then
        updatePlayerList()
        if #playerList > 0 then
            viewIndex = 1
            viewingPlayer = playerList[viewIndex]
            Camera.CameraSubject = viewingPlayer.Character:FindFirstChild("Humanoid")
        end
    else
        Camera.CameraSubject = LocalPlayer.Character:FindFirstChild("Humanoid")
        viewingPlayer = nil
        if followConnection then followConnection:Disconnect() end
    end
end)

-- Bot√µes de seta para mudar de vis√£o
Window:Button("‚¨ÖÔ∏è Ver Anterior", function()
    if not systemActive or #playerList == 0 then return end
    viewIndex = (viewIndex - 2) % #playerList + 1
    viewingPlayer = playerList[viewIndex]
    Camera.CameraSubject = viewingPlayer.Character:FindFirstChild("Humanoid")
end)

Window:Button("‚û°Ô∏è Ver Pr√≥ximo", function()
    if not systemActive or #playerList == 0 then return end
    viewIndex = viewIndex % #playerList + 1
    viewingPlayer = playerList[viewIndex]
    Camera.CameraSubject = viewingPlayer.Character:FindFirstChild("Humanoid")
end)

-- TextBox para colocar nome manualmente
Window:Box("Nome do Jogador", function(text)
    selectedName = text
end)

-- Bot√£o: Teleportar para player
Window:Button("üöÄ Teleportar", function()
    local target = Players:FindFirstChild(selectedName) or viewingPlayer
    if target and target.Character and LocalPlayer.Character then
        LocalPlayer.Character:PivotTo(target.Character:GetPivot())
    end
end)

-- Bot√£o: Grudar no jogador (seguir posi√ß√£o)
Window:Button("üß≤ Grudar", function()
    if followConnection then followConnection:Disconnect() end
    local target = Players:FindFirstChild(selectedName) or viewingPlayer
    if target and target.Character then
        followConnection = game:GetService("RunService").RenderStepped:Connect(function()
            if LocalPlayer.Character and target.Character then
                LocalPlayer.Character:PivotTo(target.Character:GetPivot() * CFrame.new(2, 0, 2))
            end
        end)
    end
end)

-- Bot√£o: Desgrudar
Window:Button("‚ùå Desgrudar", function()
    if followConnection then
        followConnection:Disconnect()
        followConnection = nil
    end
end)
